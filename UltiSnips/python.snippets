global !p
class Arg:
	def __init__(self, name, type_=""):
		self.name = name
		self.type_ = type_

def parse_args(args_line: str):
	args = args_line.split(',')
	result = []
	for arg in args:
		arg_data = arg.replace(" ","").replace("\t","").split(":")
		if len(arg_data) == 1 and arg_data[0] != "":
			result.append(Arg(arg_data[0]))
		elif len(arg_data) == 2:
			result.append(Arg(arg_data[0], arg_data[1]))
		
	return result

def args_to_self(args):
	for arg in args:
		line = "self."+arg.name
		if arg.type_ != "":
			line += ": " + arg.type_ + " = " + arg.name
		else:
			line += " = " + arg.name
		snip += line
endglobal

priority 10

snippet def "func definition" w
def ${1:name}(${2:args})${3: -> ${4:None}}:
	${0:body}
endsnippet

snippet init "__init__(self, ...)" w
def __init__(self$1):
	`!p
snip.shift(1)
for arg in parse_args(t[1]):
	line = "self."+arg.name
	if arg.type_ != "":
		line += ": " + arg.type_ + " = " + arg.name
	else:
		line += " = " + arg.name
	snip += line
`
endsnippet


snippet static "@staticmethod" w
@staticmethod
endsnippet

snippet a "arg: type" w
${1:name}:${2:type}
endsnippet


snippet from "from ... import ..." bwA
from $1 import $0
endsnippet

snippet try "try: ... except: ..." iA
try:
	$1
except ${2:Exception as e}:
	$0
endsnippet

snippet if "if ..." w
if ${1:condition}:
	$0
endsnippet

snippet ife "if ..." w
if ${1:condition}:
	$2
else:
	$0
endsnippet

snippet for "for ... in ...:" w
for ${1:what} in ${2:where}:
	$0
endsnippet

snippet range "range(a,b)" w
range($1, $2)$0
endsnippet

snippet imain "if __name__ == '__main__'" bw
if __name__ == "__main__":
	main()
endsnippet


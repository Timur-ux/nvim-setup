global !p
def toDefine(line, suffix="_HPP_"):
	def repl(match):
		return "_"+match.group(0)

	return re.sub("[A-Z]", repl, line).upper()[1:] + suffix

def toDefine_inplace(line):
	return line.upper().replace(" ", "_")

def parseClassFields(fieldsText):
	fields = fieldsText.split(';');
	fieldsData = []
	for field in fields:
		if field == "":
			continue

		words = field.split(' ')
		fieldType, fieldName = ' '.join(words[:-1]), words[-1]
		fieldsData.append((fieldType, fieldName));

	return fieldsData

def classFieldsToConstructor(fieldsText):
	fieldsData = parseClassFields(fieldsText)
	result = ""
	for ftype, fname in fieldsData:
		if result == "":
			result += ftype + ' ' + fname.replace('_', '')
			continue
		result += ", " + ftype + ' ' + fname.replace('_', '')

	return result

def classFieldToAutoAssingInConstructor(fieldsText):
	fieldsData = parseClassFields(fieldsText)
	result = " : "
	for ftype, fname in fieldsData:
		if result == " : ":
			result += f"{fname}({fname.replace('_', '')})"
			continue
		result += ", " + f"{fname}({fname.replace('_', '')})"
	
	return result;

endglobal

extends c
priority 100

snippet fora "for(auto:iterable)" wb
for(${1:auto&} ${2:elem} : ${3:iterable}) {
	$4
}
$0
endsnippet

snippet foral "for(auto:iterable) on line" wb
for(${1:auto&} ${2:elem} : ${3:iterable}) 
	$4
$0
endsnippet


snippet cl "class definition" wb
class ${1:ClassName} {
private:
	$2
public:
	$1(`!p snip.rv = classFieldsToConstructor(t[2])`)`!p snip.rv = classFieldToAutoAssingInConstructor(t[2])` {}
	$0
};
endsnippet

snippet cla "full one file class definition" wb
#ifndef `!p snip.rv = toDefine(t[1])`
#define `!p snip.rv = toDefine(t[1])`

class $1 {
private:
	$2
public:
	$1(`!p snip.rv = classFieldsToConstructor(t[2])`)`!p snip.rv = classFieldToAutoAssingInConstructor(t[2])` {}
	$0
};

#endif // !`!p snip.rv = toDefine(t[1])`
endsnippet


snippet name "namespace ... {}" wb
namespace $1 {
$0
} // namespace $1
endsnippet

snippet all "std::begin(...), std::end(...)" i
std::begin(${1:${VISUAL}}), std::end($1)$0
endsnippet

snippet cout "std::cout << ... << std::endl;" wb
std::cout << $0${1: << std::endl};
endsnippet

snippet forit "for iterator" wb
for (
	${1:auto} it = ${2:std::begin($3)};
	it != ${4:std::end($3)};
	++it
) {
$0
}
endsnippet

snippet gtemplate "google tests main template" wb
#include <gtest/gtest.h>

int main(int argc, char **argw) {
	testing::InitGoogleTest(&argc, argw);
	return RUN_ALL_TESTS();
}
endsnippet

snippet gtest "google test" wb
TEST($1TestSuite, ${2:TestName}) {
	$0
}
endsnippet

snippet gftest "google fixture test" wb
TEST_F(${1:TestFixtureClassName}, ${2:TestName}) {
	$0
}
endsnippet

snippet gfclass "google fixture class" wb
#include <gtest/gtest.h>

class $1 : public testing::Test {
	public:
	void SetUp() {
			$0
	}
	void TearDown() {

	}
}
endsnippet


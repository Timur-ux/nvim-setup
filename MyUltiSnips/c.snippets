global !p
def toDefine(line, suffix="_HPP_"):
	def repl(match):
		return "_"+match.group(0)

	return re.sub("[A-Z]", repl, line).upper()[1:] + suffix

def toDefine_inplace(line):
	return line.upper().replace(" ", "_")

endglobal

priority 10

snippet while "while(cond) {...}" w
while(${1:${VISUAL}}) {
	$2
}
endsnippet

snippet for "for(...;..;...) {}" wb
for(${1:size_t} ${2:i} = ${3:0}; $2 < $4; ${5:++$2}) {
	$6
}
endsnippet

snippet forl "1 line for circle" wb
for(${1:size_t} ${2:i} = ${3:0}; $2 < $4; ${5:++$2}) 
	$6
endsnippet

snippet if "if(...)" w
if(${1:${VISUAL}}) {
	$2
}
endsnippet


snippet ifl "1 line if(...)" w
if(${1:${VISUAL}}) 
	$2
endsnippet

snippet ifn "#ifndef #define #endif" wb
#ifndef $1`!p t[1] = toDefine_inplace(t[1])`_HPP_
#define $1_HPP_
$0
#endif // !$1_HPP_
endsnippet


snippet fun "func definition" wb
${1:void} ${3:name}(${4:args}){$5}
endsnippet


snippet ife "if(...) else" w
if(${1:${VISUAL}}) {
	$2
} else {
	$3
}
endsnippet

snippet debug "#ifdef DEBUG ... #endif" wb
#ifdef ${1:DEBUG}
$0
#endif // !$1
endsnippet

snippet main "int main(...) {}" wb
int main(int argc, char * argw[]) {
	$0

	return 0;
}
endsnippet

snippet inc "#include locally " wb
#include "$0"
endsnippet

snippet incg "#include globally" wb
#include <$0>
endsnippet
global !p
def split_line(text):
  import textwrap
  lines = textwrap.wrap(text, 78 - 19)
  output = list()
  for line in lines:
    output.append('*' + ' '*19 + line)
  snip_line = snip.tabstops[4].end[0]
  snip.buffer.append(output, snip_line + 1)
  del snip.buffer[snip_line]
 
def get_args(arglist):
  args = [arg.strip() for arg in arglist.split(',') if arg]
  return args
endglobal   

snippet do "do {...} while(...)" wb
do {
	$2
} while($1);$0
endsnippet


post_jump "if snip.tabstop == 0 : split_line(snip.tabstops[4].current_text)"
snippet func "Function Header" 
/******************************************************************************
* Function:         $1
* Description:      $3
*
* Where:`!p 
snip.rv = ""
snip >> 2
 
args = get_args(t[2])
if args:
  for arg in args:
    snip.rv += '\n' + '*' + ' '*19 + arg + ' - TODO'
snip << 2
`
*
* Return:           $4
* Error:            $5
*****************************************************************************/
$1($2){
	$0
}
endsnippet

snippet box "create box around text" w
// `!p snip.rv = "-" * (max(map(len, t[1].split("\n"))) + 6)`
// |  $1  |
// `!p snip.rv = "-" * (max(map(len, t[1].split("\n"))) + 6)`
endsnippet

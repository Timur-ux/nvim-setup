global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

# creates smth like
# start $1 end
# start $2 end
# ...
# start $nLines end
def create_multiline_placeholder(nLines, start, end):
	result = ""
	for i in range(nLines-1):
		result += start + f"${i+1}" + end + "\n"
	result += start + f"${nLines}"
	return result	

def expand_multiline(snip, start, end, line_shift = 0):
	buf = snip.buffer
	line = snip.line + line_shift
	n = int(buf[line].strip())
	if n == 0:
		return
	
	buf[line] = ""
	body = create_multiline_placeholder(n, start, end)
	snip.expand_anon(body)
endglobal

priority 10
snippet template "base template for document" bw
\documentclass[pdf, unicode, 12pt, a4paper,oneside,fleqn]{article}

\usepackage[utf8]{inputenc}
\usepackage[T2B]{fontenc}
\usepackage[english,russian]{babel}

\usepackage{minted}
\usepackage{amsmath}
\usepackage{amssymb}
$1
\begin{document}
$0
\end{document}
endsnippet

snippet root "root var for deducting main .tex file" bw
%! TeX Root = ${1:../*.tex}
endsnippet




snippet beg "\begin{env} ... \end{env}" bA
\begin{${1:environment}}
	$0
\end{$1}
endsnippet

context "math()"
snippet align "\begin{align}...\end{align}" iA
\begin{align}
	$0
\end{align}
endsnippet


snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
$1
.\]
$2
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet _ "_{}" iA
_{$1}$0
endsnippet

context "math()"
snippet sr "squared" iA
^2
endsnippet

context "math()"
snippet cb "cubed" iA
^3
endsnippet

context "math()"
snippet rd "upper case" iA
^{$1}$0
endsnippet

priority 0
context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet


context "math()"
snippet / "Fraction" iA
\\frac{${VISUAL}}{$1}$0
endsnippet

priority 20
context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet


priority 1000
context "math()"
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet


priority 10
snippet '(\w+)\.par' "word to parethnesses" wr
(`!p snip.rv = match[1]`$1)$0
endsnippet

context "math()"
snippet "bar" "line over arg" riA
\overline{$1}$0
endsnippet

context "math()"
snippet "hat" "hat over arg" riA
\hat{$1}$0
endsnippet

context "math()"
snippet sum "\sum" iA
\sum
endsnippet

context "math()"
snippet ooo "\infty" iA
\infty
endsnippet

context "math()"
snippet lim "\lim" iA
\lim
endsnippet

context "math()"
snippet f "f: R -> R" i
${1:f}\: : ${2:\mathbb{R}} \to ${3:\mathbb{R}}$0
endsnippet

context "math()"
snippet -> "\to" iA
\to
endsnippet

context "math()"
snippet !> "\mapsto" iA
\mapsto
endsnippet

priority 100
context "math()"
snippet \lim "\lim_{n -> \infty}" i
\lim_{${1:n} \to ${2:\infty}}$0
endsnippet

context "math()"
snippet \sum "\sum_{k=1}^{n}" i
\sum_{${1:k}=${2:1}}^{${3:n}}$0
endsnippet

context "math()"
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet "(\\?\w+)(,\.|\.,)" "Vector postfix" riA
\vec{`!p snip.rv=match.group(1)`}
endsnippet

priority 30
snippet sss "\subsubsection{...}" bw
\subsubsection{$0}
endsnippet

priority 20
snippet ss "\subsection{...}" bw
\subsection{$0}
endsnippet

priority 10
snippet s "\section{...}" bw
\section{$0}
endsnippet

snippet " \\item" " \\item$0" iA
	\\item$0
endsnippet


post_jump "expand_multiline(snip, '\\item ', '')"
snippet 'ben(\d+)' "\begin{enumerate}...\end{enumerate}" rwb
\begin{enumerate}
`!p snip.rv = match.group(1)`$0
\end{enumerate}
endsnippet

post_jump "expand_multiline(snip, '\\item ', '')"
snippet 'bit(\d+)' "\begin{itemize}...\end{itemize}" rwb
\begin{itemize}
`!p snip.rv = match.group(1)`$0
\end{itemize}
endsnippet

snippet svg "\includesvg" wb
\includesvg{$0}
endsnippet

snippet img "\includegraphics" wb
\includegraphics${1:[$2]}{$0}
endsnippet

snippet fig "centered figure" wb
\begin{figure}
\centering
img$0
\end{figure}
endsnippet

snippet p "\usepackage" wb
\usepackage{$0}
endsnippet

snippet pb "\pagebreak" wb
\pagebreak
endsnippet

